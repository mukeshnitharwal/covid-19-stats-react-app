{"version":3,"sources":["covid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Covid","useState","latest","setLatest","results","setResults","searchCountry","setSearchCountry","useEffect","axios","all","get","then","responceArr","data","catch","error","console","log","latestUpdate","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","height","Body","Title","Text","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","critical","tests","textAlign","CardGroup","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","App","basename","exact","path","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.734ca701.chunk.js","sourcesContent":["import Columns from 'react-columns'\r\nimport React, { useEffect, useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport CardGroup from 'react-bootstrap/CardGroup';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form'\r\nimport axios from 'axios'\r\n\r\nfunction Covid() {\r\n  const [latest, setLatest] = useState([])  //for world wide covid cases\r\n  const [results, setResults] = useState([]);//for country wise coivd cases and country information\r\n\r\n  const [searchCountry, setSearchCountry] = useState(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n    //  .all is used for multilpe apis //......for single api code is given below\r\n    axios.all([axios.get('https://corona.lmao.ninja/v2/all')\r\n      , axios.get('https://corona.lmao.ninja/v2/countries?sort=country')])\r\n      .then(responceArr => {     ///it can also be used as .then(latest,countries)\r\n        //handle success\r\n        setLatest(responceArr[0].data)             //setLatest(latest.data)\r\n        setResults(responceArr[1].data)           //console.log(counties.data)\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        // always executed\r\n      });\r\n\r\n    ////below code is for single api\r\n\r\n    // axios.get('https://corona.lmao.ninja/v2/all')//the api link gives the covid data\r\n    //   .then(res => {\r\n    //     //handle success\r\n    //     setLatest(res.data)\r\n    //   })\r\n    //   .catch(function (error) {\r\n    //     // handle error\r\n    //     console.log(error);\r\n    //   })\r\n    //   .then(function () {\r\n    //     // always executed\r\n    //   });\r\n  })\r\n  ////parseInt() is used to changr string into num\r\n  let date = new Date(parseInt(latest.updated));\r\n  let latestUpdate = date.toString()\r\n\r\n  const filterCountry = results.filter(item => {\r\n\r\n    if (!searchCountry) {\r\n      return item\r\n    }\r\n    else {\r\n      // if (searchCountry === item.country) {\r\n      //we use .include instead of === becoz (===) gives ans only when he found eact match\r\n      ///but .include started seaching on the behalf input\r\n      if (item.country.includes(searchCountry)) {\r\n        return item\r\n      }\r\n    }\r\n    // return searchCountry!==\" \" ? item.country===searchCountry : item;\r\n  });\r\n  const countries = filterCountry.map((data, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        bg=\"light\"\r\n        text=\"dark\"\r\n        className=\"text-center\"\r\n        style={{ margin: '10px' }}\r\n      >\r\n        <Card.Img variant=\"top\" src={data.countryInfo.flag}\r\n          style={{ height: \"13rem\" }}\r\n        //  style={{ width: \"18rem\", height: \"9rem\", marginLeft: \"13rem\",marginRight:\"13rem\" }}\r\n        />\r\n        <Card.Body>\r\n          <Card.Title>{data.country}</Card.Title>\r\n          <Card.Text>Total cases: {data.cases}</Card.Text>\r\n          <Card.Text>Today's cases:  {data.todayCases}</Card.Text>\r\n          <Card.Text>Total deats: {data.deaths}</Card.Text>\r\n          <Card.Text>Today's deaths: {data.todayDeaths}</Card.Text>\r\n          <Card.Text>Total recovered: {data.recovered}</Card.Text>\r\n          <Card.Text>Today's recovered: {data.todayRecovered}</Card.Text>\r\n          <Card.Text>Total active: {data.active}</Card.Text>\r\n          <Card.Text>Critical cases: {data.critical}</Card.Text>\r\n          <Card.Text>Total tests: {data.tests}</Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  });\r\n\r\n  var queries = [{\r\n    columns: 2,\r\n    query: 'min-width: 500px'\r\n  }, {\r\n    columns: 3,\r\n    query: 'min-width: 1000px'\r\n  }];\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={{ textAlign: \"center\", margin: \"10px\" }}>Covid-19 Live Stats</h2>\r\n      <CardGroup>\r\n        <Card bg=\"secondary\" text=\"white\" style={{ margin: \"10px\" }}>\r\n          <Card.Body>\r\n            <Card.Title>cases</Card.Title>\r\n            <Card.Text>\r\n              {latest.cases}\r\n            </Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small>Last updated {latestUpdate}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n\r\n        <Card bg=\"danger\" text=\"white\" style={{ margin: \"10px\" }}>\r\n          <Card.Body>\r\n            <Card.Title>deaths</Card.Title>\r\n            <Card.Text>\r\n              {latest.deaths}\r\n            </Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small >Last updated {latestUpdate}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n\r\n        <Card bg=\"success\" text=\"white\" style={{ margin: \"10px\" }}>\r\n          <Card.Body>\r\n            <Card.Title>recovered</Card.Title>\r\n            <Card.Text>\r\n              {latest.recovered}\r\n            </Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small >Last updated {latestUpdate}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n      </CardGroup>\r\n\r\n      <Form >\r\n        <Form.Group controlId=\"formGroupSearch\" style={{ margin: \"30px\" }}>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"search a country\"\r\n            onChange={e => setSearchCountry(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n      <Columns queries={queries}>{countries}</Columns>\r\n    </div>\r\n  );\r\n}\r\nexport default Covid;\r\n","import React from 'react'\nimport Covid from './covid' \nimport {Route,Switch,HashRouter,Redirect} from 'react-router-dom'\nfunction App()\n{\n  return (\n    <>\n    <HashRouter basename='/covid-19-stats-react-app'>\n      <Switch>\n        <Route exact path='/'>\n        <Covid />\n        </Route>\n        <Route><Redirect to='/'></Redirect></Route>\n      </Switch>\n    </HashRouter>\n    \n    </>\n  )\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}